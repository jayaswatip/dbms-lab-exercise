Ex.No.6	                              PL/SQL STATEMENTS

AIM 
To execute the PL/SQL Control Statements 
 
PL/SQL Control Statements
1.Simple IF-THEN Statement
SQL> DECLARE
  2  n number;
  3  BEGIN
  4  n:=&n;
  5  IF n > 0 THEN
  6  dbms_output.put_line('Given number is Greater than ZERO');
  7  END IF;
  8  END;
  9  /
Enter value for n: 3
old   4: n:=&n;
new   4: n:=3;
Given number is Greater than ZERO
PL/SQL procedure successfully completed.

2.Simple IF-THEN-ELSE Statement
SQL> DECLARE
  2  n number;
  3  BEGIN
  4  n:=7;
  5  IF n>8 THEN
  6  dbms_output.put_line('Given number is Greater than 8');
  7  ELSE
  8  dbms_output.put_line('Given number is Less than 8');
  9  END IF;
 10  END;
 11  /
Given number is Less than 8
PL/SQL procedure successfully completed.

3.Nested IF-THEN-ELSE Statement
SQL> DECLARE
  2  n number;
  3  BEGIN
  4  n:=&n;
  5  IF n > 0 THEN
  6  dbms_output.put_line('The number is greater than zero');
  7  ELSE
  8  IF n=0 THEN
  9  dbms_output.put_line('The number is zero');
 10  ELSE
 11  dbms_output.put_line('The number is less than zero');
 12  END IF;
 13  END IF;
 14  END;
 15  /
Enter value for n: 0
old   4: n:=&n;
new   4: n:=0;
The number is zero
PL/SQL procedure successfully completed.

4.IF-THEN-ELSIF Statement
SQL> DECLARE
  2  n number;
  3  BEGIN
  4  n:=&n;
  5  IF n > 0 THEN
  6  Dbms_output.put_line('Given number is Greater than ZERO');
  7  ELSIF n = 0 THEN
  8  Dbms_output.put_line('Given number is Equal to ZERO');
  9  ELSE
 10  Dbms_output.put_line('Given number is Less than ZERO');
 11  END IF;
 12  END;
 13  /
Enter value for n: 2
old   4: n:=&n;
new   4: n:=2;
Given number is Greater than ZERO
PL/SQL procedure successfully completed.

5.Extended IF-THEN Statement
SQL> DECLARE
  2  grade char(1);
  3  begin
  4  grade:='B';
  5  if grade='A' then
  6  dbms_output.put_line('Excellent');
  7  elsif grade='B' then
  8  dbms_output.put_line('Very Good');
  9  elsif grade='c' then
 10  dbms_output.put_line('Good');
 11  elsif grade='F' then
 12  dbms_output.put_line('Fail');
 13  else
 14  dbms_output.put_line('no such grade');
 15  end if;
 16  end;
 17  /
Very Good
PL/SQL procedure successfully completed.

6.Simple CASE Statement

SQL> DECLARE

  2  grade char(1);

  3  begin

  4  grade:='B';

  5  case grade

  6  when 'A' then dbms_output.put_line('Excellent');

  7  when 'B' then dbms_output.put_line('Vey Good');

  8  when 'C' then dbms_output.put_line('Good');

  9  when 'F' then dbms_output.put_line('Fail');

 10  else

 11  dbms_output.put_line('no such grade');

 12  end case;

 13  end;

 14  /

Vey Good

PL/SQL procedure successfully completed.


7.Searched CASE Statement

SQL> DECLARE

  2  grade char(1);

  3  begin

  4  grade:='B';

  5  case

  6  when grade='A' then dbms_output.put_line('Excellent');

  7  when grade='B' then dbms_output.put_line('Good');

  8  when grade='c' then dbms_output.put_line('Fail');

  9  else

 10  dbms_output.put_line('no such grade');

 11  end case;

 12  end;

 13  /

Good

PL/SQL procedure successfully completed.


8.EXCEPTION Instead of ELSE Clause in CASE Statement
SQL> DECLARE

  2  grade char(1);

  3  begin

  4  grade:='B';

  5  case

  6  when grade='A' then dbms_output.put_line('Excellent');

  7  when grade='B' then dbms_output.put_line('Good');

  8  when grade='c' then dbms_output.put_line('Fail');

  9  end case;

 10  exception

 11  when case_not_found then

 12  dbms_output.put_line('no such grade');

 13  end;

 14  /

Good

PL/SQL procedure successfully completed.


9.WHILE-LOOP Statement
SQL> DECLARE
  2  a number;
  3  i NUMBER := 1;
  4  BEGIN
  5  a := 10;
 6  WHILE i < a LOOP
  7  dbms_output.put_line('value: ' || i);
  8  i := i + 1;
  9  END LOOP;
 10  END;
 11  /
value: 1
value: 2
value: 3
value: 4
value: 5
value: 6
value: 7
value: 8
value: 9
PL/SQL procedure successfully completed.

10.FOR-LOOP Statement
SQL> BEGIN
  2  FOR i IN 1..5
  3  LOOP
  4  DBMS_OUTPUT.PUT_LINE (TO_CHAR(i));
  5  END LOOP;
  6  END;
  7  /
 1
 2
 3
 4
 5
PL/SQL procedure successfully completed.

11.Reverse FOR-LOOP Statement
SQL> BEGIN
  2  FOR i IN REVERSE 1..5
  3  LOOP
  4  DBMS_OUTPUT.PUT_LINE (TO_CHAR(i));
  5  END LOOP;
  6  END;
  7  /
 5
 4
 3
 2
 1
PL/SQL procedure successfully completed.

12.Simple GOTO Statement
SQL> DECLARE
  2  p VARCHAR2(30);
  3  n PLS_INTEGER := 37;
  4  BEGIN
  5  FOR j in 2..ROUND(SQRT(n))
  6  LOOP
  7  IF n MOD j = 0 THEN
  8  p := ' is not a prime number';
  9  GOTO print_now;
 10  END IF;
 11  END LOOP;
 12  p := ' is a prime number';
 13  <<print_now>>
 14  DBMS_OUTPUT.PUT_LINE(TO_CHAR(n) || p);
 15  END;
 16  /
37 is a prime number
PL/SQL procedure successfully completed.




RESULT 
Thus PL/SQL Control Statements  and PL/SQL Programs were executed.

 
